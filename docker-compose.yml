services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      queue:
        condition: service_started
    restart: always
    environment:
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: password
      DB_DATABASE: exampledb
      DB_PORT: 5432
      NODE_ENV: production
      QUEUE_HOST: queue
      QUEUE_PORT: 5672
    secrets:
      - admin_password
      - gemini_key

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: exampledb
      TZ: "America/Chicago"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  queue:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672" # Management UI
    restart: always

  renderer:
    build:
      context: ./renderer
      dockerfile: Dockerfile
    depends_on:
      queue:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      QUEUE_HOST: queue
      QUEUE_PORT: 5672
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: password
      DB_DATABASE: exampledb
      DB_PORT: 5432
    restart: always

secrets:
  admin_password:
    file: /home/leo/admin_password.txt
  gemini_key:
    file: /home/leo/gemini_key.txt

volumes:
  postgres_data:
